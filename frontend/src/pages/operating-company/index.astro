---

import BaseTemplate from '@layout/Base.astro'

import OperatingCompanyTable from '@components/OperatingCompanyTable'
import Icon from '@components/Icon.astro'
import { getOperatingCompanies } from '@modules/api'

import { type ApiResponseWithPagination, PaginationOrderDirection } from '@type/Api.types'
import type { OperatingCompany } from '@type/OperatingCompany.types'

if(!Astro.locals.loggedIn) return Astro.redirect("/login")

const countPerPage: number = parseInt(Astro.url.searchParams.get('limit') || "10"),
	page: number = parseInt(Astro.url.searchParams.get('page') || "1"),
	orderBy: string = Astro.url.searchParams.get('order_by') || "id",
	orderByDirection: PaginationOrderDirection = (
			Astro.url.searchParams.get('order_by_direction')?.startsWith("D") ?
				PaginationOrderDirection.DESCENDING
			: PaginationOrderDirection.ASCENDING
		) || PaginationOrderDirection.ASCENDING,
	queryParams = {
			limit: countPerPage.toString(),
			offset: (countPerPage * (page - 1)).toString(),
			orderBy,
			orderByDirection
		},
	{
			result: operatingCompanies,
			meta: {
				max,
				limit,
				offset,
				// orderBy,
				// orderByDirection
			}
		} = await getOperatingCompanies(queryParams, Astro.locals.token),
	maxPage = Math.ceil(max / countPerPage)

const newLinkWithParam = (name: string, value: string | number) => {
	return "?" + (new URLSearchParams({ ...queryParams, [name]: value }).toString())
}

const changeSortDirection = () => {
	return newLinkWithParam(
			"order_by_direction",
			orderByDirection == PaginationOrderDirection.ASCENDING ?
				PaginationOrderDirection.DESCENDING
				: PaginationOrderDirection.ASCENDING
		)
}

// const renderSort = (key: string) => {
// 	return <Fragment set:html={
// 		orderBy == key ?
// 			orderByDirection == PaginationOrderDirection.ASCENDING ?
// 					'<Icon icon="sort-alpha-down" />'
// 				:
// 					'<Icon icon="sort-alpha-up" />'
// 			: ''
// 	} />
// }

---

<BaseTemplate>
	<h1>Operating Companies</h1>
	<h3>
		View and manage all operating companies below...
	</h3>

	<section class="operations d-flex justify-content-between mb-2">
		<div class="d-flex align-items-center gap-2">
			Sort by:

			<a href={ orderBy != "id" ? newLinkWithParam("order_by", "id") : changeSortDirection() }>
				<button
					type="button"
					class:list={["btn", "btn-secondary", "btn-sm", { active: orderBy == "id" }]}
					aria-pressed={ orderBy == "id" }>
					ID
				</button>
			</a>
			<a href={ orderBy != "noc" ? newLinkWithParam("order_by", "noc") : changeSortDirection() }>
				<button
					type="button"
					class:list={["btn", "btn-secondary", "btn-sm", { active: orderBy == "noc" }]}
					aria-pressed={ orderBy == "noc" }>
					NOC
				</button>
			</a>
			<a href={ orderBy != "short_code" ? newLinkWithParam("order_by", "short_code") : changeSortDirection() }>
				<button
					type="button"
					class:list={["btn", "btn-secondary", "btn-sm", { active: orderBy == "short_code" }]}
					aria-pressed={ orderBy == "short_code" }>
					Short Code
				</button>
			</a>
			<a href={ orderBy != "name" ? newLinkWithParam("order_by", "name") : changeSortDirection() }>
				<button
					type="button"
					class:list={["btn", "btn-secondary", "btn-sm", { active: orderBy == "name" }]}
					aria-pressed={ orderBy == "name" }>
					Name
				</button>
			</a>
		</div>
		<a href="new/">
			<button type="button" class="btn btn-success" aria-label="Add new">New</button>
		</a>
	</section>
	<section class="table-container">
		<table class="table">
			<thead>
				<tr>
					<th scope="col">
						#
						<!-- { renderSort("id") } -->
					</th>
					<th scope="col">
						NOC
					</th>
					<th scope="col">
						Short Code
					</th>
					<th scope="col">
						Name
					</th>
					<th scope="col">
						Actions
					</th>
				</tr>
			</thead>
			<tbody>
				{ operatingCompanies.map(opco =>
						<tr>
							<td scope="row">
								{ opco.id }
							</td>
							<td>
								{ opco.noc }
							</td>
							<td>
								{ opco.short_code }
							</td>
							<td>
								{ opco.name }
							</td>
							<td>
								<a href={`/operating-company/${opco.id}/`}>
									<!-- -&gt; -->
									Edit
								</a>
							</td>
						</tr>
					) }
			</tbody>
		</table>
	</section>

	<nav class="d-flex justify-content-between align-items-center" aria-label="Page navigation example">
		<p>
			Showing { (page - 1) * limit } - { ((page - 1) * limit) + operatingCompanies.length } of { max }
			from page { page } { maxPage ? `of ${ maxPage }` : "" }
		</p>
		<ul class="pagination justify-content-end">
			<li class:list={[ "page-item", { disabled: page <= 1 } ]}>
				<a class="page-link" href={ page >= 0 ? newLinkWithParam("page", (page - 1).toString()) : undefined }>Previous</a>
			</li>
			{ [ ...Array(Math.ceil(max / countPerPage)) ].map((x, i) =>
				<li class:list={[ "page-item", { active: page == ++i } ]}>
					<a class="page-link" href={ newLinkWithParam("page", i) }>{i}</a>
				</li>
			) }
			<li class:list={[ "page-item", { disabled: page >= maxPage } ]}>
				<a class="page-link" href={ page < maxPage ? newLinkWithParam("page", (page + 1).toString()) : undefined }>Next</a>
			</li>
		</ul>
	</nav>
</BaseTemplate>
