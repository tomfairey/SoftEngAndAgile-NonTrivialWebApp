version: "3.3"

services:
  backend:
    build:
      context: ./backend/
      dockerfile: Dockerfile
    environment:
      - POSTGRES_HOST=database
      - POSTGRES_DB=${PG_DB:-nontrivial-pg}
      - POSTGRES_USER=${PG_USER:-nontrivial-pg}
      - POSTGRES_PASSWORD=${PG_PASSWORD:?Postgres password is required, see .env.example file}
      - JWT_SECRET=${JWT_SECRET:?JWT secret is required, see .env.example file}
    ports:
      - 8081:80
    volumes:
      - ./backend/requirements.txt:/code/requirements.txt
      - ./backend/main.py:/code/main.py
      - ./backend/app/:/code/app/
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider http://localhost/api/v1/status || exit 1"
      interval: 5s
      timeout: 5s
      retries: 5
    # links:
    #   - "database:database"
    networks:
      - backend
      - database
    depends_on:
      database:
        condition: service_healthy
      initialiser:
        condition: service_completed_successfully
    # expose:
    #   - 80
    # deploy:
    #   replicas: 4
    #   labels:
    #     - "traefik.enable=true"
    #     - "traefik.http.routers.whoami.rule=Host(`localhost`)"
    #     - "traefik.http.routers.whoami.entrypoints=web"
    ### TODO: EXPOSE AS /api/ ###
    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.routers.whoami.rule=Host(`localhost`)"
    #   - "traefik.http.routers.whoami.entrypoints=web"
    restart: always

  ### TODO: Make the frontend build/run in a container ###
  frontend:
    build:
      context: ./frontend/
      dockerfile: Dockerfile-dev
    environment:
      - "BACKEND_BASE=localhost:8081"
    ports:
      - 8082:80
    volumes:
      - ./frontend/public/:/app/public/
      - ./frontend/src/:/app/src/
      - ./frontend/astro.config.mjs:/app/astro.config.mjs
      - ./frontend/package.json:/app/package.json
      - ./frontend/package-lock.json:/app/package-lock.json
      - ./frontend/tsconfig.json:/app/tsconfig.json
    networks:
      - backend
      - frontend
    healthcheck:
      test: "curl --fail http://localhost/status || exit 1"
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      backend:
        condition: service_healthy
      # database:
      #   condition: service_healthy
      initialiser:
        condition: service_completed_successfully
    # expose:
    #   - 80
    # deploy:
    #   replicas: 4
    #   labels:
    #     - "traefik.enable=true"
    #     - "traefik.http.routers.whoami.rule=Host(`localhost`)"
    #     - "traefik.http.routers.whoami.entrypoints=web"
    ### TODO: EXPOSE AS / ###
    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.routers.whoami.rule=Host(`localhost`)"
    #   - "traefik.http.routers.whoami.entrypoints=web"
    restart: always

  initialiser:
    build:
      context: ./initialiser/
      dockerfile: Dockerfile
    environment:
      - POSTGRES_HOST=database
      - POSTGRES_DB=${PG_DB:-nontrivial-pg}
      - POSTGRES_USER=${PG_USER:-nontrivial-pg}
      - POSTGRES_PASSWORD=${PG_PASSWORD:?Postgres password is required, see .env.example file}
    volumes:
      - ./initialiser/requirements.txt:/code/requirements.txt
      - ./initialiser/main.py:/code/main.py
    # links:
    #   - "database:database"
    networks:
      - database
    depends_on:
      database:
        condition: service_healthy
    restart: on-failure

  database:
    # image: "postgres:12"
    image: "postgis/postgis:12-3.4"
    # container_name: "database"
    environment:
      - POSTGRES_DB=${PG_DB:-nontrivial-pg}
      - POSTGRES_USER=${PG_USER:-nontrivial-pg}
      - POSTGRES_PASSWORD=${PG_PASSWORD:?Postgres password is required}
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 1s
      timeout: 5s
      retries: 10
    restart: always

  # db_admin:
  #   image: "dpage/pgadmin4:8"
  #   container_name: "db_admin"
  #   environment:
  #     - POSTGRES_DB=${PG_DB:-nontrivial-pg}
  #     - POSTGRES_USER=${PG_USER:-nontrivial-pg}
  #     - POSTGRES_PASSWORD=${PG_PASSWORD:?Postgres password is required}
  #     - PGADMIN_DEFAULT_EMAIL=admin@nontrivial.thomasfairey.app
  #     - PGADMIN_DEFAULT_PASSWORD=admin
  #   ports:
  #     - 8083:80
  #   restart: unless-stopped

networks:
  backend:
    internal: true
  database:
    internal: true
  frontend:

volumes:
  postgres_data:
    driver: local